v0.9.7.5 ================================================

	* Generics: much better implementation.
	* Generics: no more Expression<> use in Silverlight.
	* Generics: support for checked operations with Int32 / Int64.
	* Checking: now performing when optimizing if enabled.
	* Compiler: support for compiling Decimal expressions.
	* Compiler: reusing equal references for owners.
	* Compiler: loading constants of non built-in types.
	* Parser: finally support for negative literals =).
	* Collections: ability to set custom collectin for ImportBuiltIn().
	* FunctionCollection: Add<TDelegate> renamed => AddDel<TDelegate>.
	* Solution: better debugger views, fix some mistakes.
	* Solution: new unit tests pack and better code coverage.
	* Solution: many of refactoring and small fixes.
	* Parsing: support for cultures with the same symbol
	           for decimal and function arguments separator.
	* Bugfix: wrong parsing of real literals with decimal separator.
	* Bugfix: Silverlight build fails while compiling
	          expressions of Single type with power operator.
	* Bugfix: wrong parsing binary int64 literals.

v0.9.7.3 beta ===========================================

	* Silverlight: compiler (Evaluator) is now supported!
	* Silverlight: visibility checks for methods import.
	* Silverlight: async Tabulate() support for Tabulator.
	* Solution: Delegates support for CF 2.0 build.
	* QuickInterpret: faster calls of imported delegates.
	* Interpret: better work with imported delegates.
	* Interpret: slightly faster calls via reflection.
	* FunctionCollection: new Add<TDelegate> method included.
	* Solution: FunctionItem<T> renamed => FunctionInfo<T>.
	* ValueRange: better Double \ Single range validation.
	* Collection: ImportBuiltIns works now for all supported types.
	* Solution: more unit tests + some custom tests for Silverlight.
	* Bugfix: methods with targets transform to delegates in Interpret.
	* Bugfix: compiling Evaluator<T> with 0 args and owner.

v0.9.7.0 beta ===========================================

	* Solution: generics implemented!
	* Generics: built-in support for BCL types:
		Int32, Int64, Single, Double, Decimal
	* Generics: integer literals support:
		"0xFFEA" - hexadecimal
		"0b0101" - binary
	* Interpret: more performance improvements.
	* Evaluator: EvaluateMany() removed (wrong decision).
	* Solution: improved dependencies between classes.
	* Solution: all projects moved to generics.
	* Solution: complete code reformat (looks better =).
	* Solution: folder structure re-done.
	* UnitTests: became more and more generic...
	* UnitTests: SL 2.0 and CF versions of tests are available.
	* Tabulator: beta support for async tabulation at CF/SL build.
	* Docs: generic type parameters documentation.

v0.9.5.1 ================================================

	* Interpret: tabulation support.
	* Interpret: async tabulation support.
	* Interpret: Allocate() method support.
	* Interpret: less re-allocations while creation.
	* Interpret: small fixes for instance calls.
	* TabRange: replaced with immutable ValueRange.
	* Solution: ValueRange added to SL/CF projects.
	* Demo App: no re-allocations while rendering.
	* Evaluator: instance calls performance increased.
	* Interpret: new Evaluate() overload with 3 args.
	* Evaluator: new EvaluateMany() methods.
	* Solution: a bit of exception redesign.
	* Solution: added Polish resources (thx to Mariusz).
	* Solution: added benchmarks project.
	* Bugfix: missed checks in imports of methods.
	* Bugfix: wront targets in instance calls in Interpret.
	* Docs: small fix-ups and some generalizations.

v0.9.4.0 ================================================

	* Engine: support for instance method calls!
	* Engine: support for DynamicMethod calls!
	* Engine: faster literals names lookup.
	* Solution: global design improvements.
	* CalcContext: collection properties now read-only.
	* Collections: AddRange() methods.
	* Collections: rename 'FunctionDictionary' =>
		back to 'FunctionCollection' and now
		doesn't implement IDictionary interface.
	* Collections: FunctionCollections re-design.
	* Collections: no public constructors in FunctionGroup.
	* Engine: compilation is now 2-pass.
	* Bugfix: not valid tabulation when >3 ranges.
	* Bugfix: added some forgotten arguments checks.
	* Solution: new pack of unit tests.

v0.9.3.21 ===============================================

	* Solution: .NET Compact Framework 2.0 is now supported.
	* Solution: code reformat, satisfy many of StyleCop rules.
	* Solution: mass Debug.Assert usage => small fixes.
	* Solution: rename Function => FunctionItem (VB keyword).
	* Engine: performance improvements, less memory usage.
	* Engine: some more decomposition, smaller code size.
	* Optimizer: fixed folding of functions with params.
	* Collections: ICollection is now explicitly implemented.
	* Parser: now is able to control implicit multiplication mode.
	* Tabulator: rewrited, supported more than 2 ranges now.
	* Tabulator: static Allocate() and TabulateToArray() methods.
	* Tabulator: asynchronously Tabulate() is now supported.
	* TabRange: much better Count property calculation.

v0.9.2.1 ================================================

	* Solution: this changelog included.
	* Solution: directory structure redone.
	* FunctionCollection: completely rewritten.
	* FunctionCollection: added small support for delegates.
	* Engine: some improvements in method calls.
	* Rename: 'FunctionCollection' => 'FunctionDictionary'.
	* Rename: 'ConstantCollection' => 'ConstantDictionary'.
	* Documentation: many fixes, added new Functions API.
	* Interpret: all known bugs are fixed, serialization works now.
	* Interpret: performance increase (replacing collections with arrays).
	* Interpret: fully immutable now (but not thread-safe!).
	* Interpret: added EvaluateSync() - thread-safe version of Evaluate().
	* TabRange: serializable (just forget to mark it with attribute).
	* TabRange: explictly implements IEnumerable<double>.
	* TabRange: Count property value calculation is cached now.
	* IEvaluator: was removed from SL/CF versions (no need for it).
	* Unit Tests: improved + new (for thread-safety).

v0.9.1.0 ================================================

	* Initial release.